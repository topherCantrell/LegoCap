font = {
    '0': 0xC3F,
    '1': 0x406,
    '2': 0xDB,
    '3': 0x8F,
    '4': 0xE6,
    '5': 0xED,
    '6': 0xFD,
    '7': 0x1401,
    '8': 0xFF,
    '9': 0xE7,
    'A': 0xF7,
    'B': 0x128F,
    'C': 0x39,
    'D': 0x120F,
    'E': 0xF9,
    'F': 0xF1,
    'G': 0xBD,
    'H': 0xF6,
    'I': 0x1209,
    'J': 0x1E,
    'K': 0x2470,
    'L': 0x38,
    'M': 0x536,
    'N': 0x2136,
    'O': 0x3F,
    'P': 0xF3,
    'Q': 0x203F,
    'R': 0x20F3,
    'S': 0x18D,
    'T': 0x1201,
    'U': 0x3E,
    'V': 0xC30,
    'W': 0x2836,
    'X': 0x2D00,
    'Y': 0x1500,
    'Z': 0xC09,
    ' ': 0,
}

def map_letter(s):
    if s not in font:
        return 0xFFFF
    return font[s]

def show_message(i2c, s):
    buf2 = [0, 0,0, 0,0, 0,0, 0,0]
    pos = 1
    for g in s:
        v = map_letter(g)
        buf2[pos] = v&255
        buf2[pos+1] = (v>>8)&255
        pos += 2
	
    i2c.writeto(0x70,bytes(buf2))

# alpha
#
# A,a  B,b  C,c  D,d
# Digits: hgfedcba
#     a
#    ---
#  f | | b
#   g---h 
#  e | | c
#    ---
#     d
# Segments: hgfedcba
#  a  b  c
#   \ | /
#   / | \
#  d  e  f  *g  

# grid
#
# First byte is bottom row mapped: gfedcbah
# Second byte not mapped
# Third byte mapped to 2nd row from bottom: gfedcbah
# 15th byte is top row: gfedcbah

buffer = [0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]

def write_grid(i2c, data):
    pos = 1
    for y in range(7,-1,-1):
        value = ''
        row = data[y][7:8]+data[y][0:7]
        for x in range(7,-1,-1):
            value = str(row[x]) + value
        buffer[pos] = int(value,2)
        pos += 2
    i2c.writeto(0x70, bytes(buffer))

imgbuf = [
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
]
def draw_image(i2c, data, rev=False):    
    if rev:
        sc = 0
        cc = 1
    else:
        sc = 1
        cc = 0
    data = data.strip()
    rows = data.split()
    for y in range(8):
        for x in range(8):
            if rows[y][x]=='.':
                imgbuf[y][x] = cc
            else:
                imgbuf[y][x] = sc
    write_grid(i2c,imgbuf)

IMG_SMILE_BIG = """
........
..#..#..
..#..#..
..#..#..
#......#
##....##
.##..##.
..####..
"""

IMG_HEART_BIG = """
.##..##.
########
########
########
.######.
..####..
...##...
........
"""

IMG_HEART_SMALL = """
........
........
..#..#..
.######.
..####..
...##...
........
........
"""

IMG_SMILE = """
..####..
.#....#.
#.#..#.#
#......#
#.#..#.#
#..##..#
.#....#.
..####..
"""

IMG_ALIEN1 = """
...##...
..####..
.######.
##.##.##
########
..#..#..
.#.##.#.
#.#..#.#
"""

IMG_ALIEN2 = """
...##...
..####..
.######.
##.##.##
########
.#.##.#.
#......#
.#....#.
"""

IMG_SMILE_REV = """
########
#.####.#
#..##..#
########
##.##.##
#......#
###..###
########
"""

IMG_HOUR = """
########
.######.
..####..
...##...
...##...
..####..
.######.
########
"""

IMG_SQUARES1 ="""
########
#......#
#.####.#
#.#..#.#
#.#..#.#
#.####.#
#......#
########
"""

IMG_SQUARES2 ="""
........
.######.
.#....#.
.#.##.#.
.#.##.#.
.#....#.
.######.
........
"""

IMG_SQUARE_WIPES=[
"""
########
#......#
#......#
#......#
#......#
#......#
#......#
########
"""
,
"""
########
########
##....##
##....##
##....##
##....##
########
########
"""
,
"""
########
########
########
###..###
###..###
########
########
########
"""
,
"""
########
########
########
########
########
########
########
########
"""
,
"""
........
.######.
.######.
.######.
.######.
.######.
.######.
........
"""
,
"""
........
........
..####..
..####..
..####..
..####..
........
........
"""
,
"""
........
........
........
...##...
...##...
........
........
........
"""
]

IMG_SKULL = """
........
.##..##.
.##..##.
........
...##...
...##...
...##...
........
"""

IMG_PLUS = """
........
...##...
...##...
.######.
.######.
...##...
...##...
........
"""

IMG_X = """
........
.#....#.
..#..#..
...##...
...##...
..#..#..
.#....#.
........
"""

IMG_BLANK = """
........
........
........
........
........
........
........
........
"""